// Copyright(c) 2021-present JoeyR
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

#include <array>
#include <optional>

namespace FastBiome {

namespace whittaker {

// clang-format off
constexpr std::array<std::array<int,45>,45> whittaker_lookup_table{ 
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,1,1,1,1,1,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,1,1,1,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,5,5,5,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,4,4,4,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,4,4,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,4,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,4,4,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,4,5,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2},
std::array<int,45>{0,0,0,0,0,0,0,0,0,9,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,3,3},
std::array<int,45>{0,0,0,0,0,0,0,0,9,9,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,3,3,3,3},
std::array<int,45>{0,0,0,0,0,0,0,9,9,9,8,8,8,8,8,8,8,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,3,3,3,3,3,3,3},
std::array<int,45>{0,0,0,0,0,0,9,9,9,9,8,8,8,8,8,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,3,3,3,3,3,3,3,3,3},
std::array<int,45>{0,0,0,0,0,9,9,9,9,8,8,8,8,8,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,3,3,3,3,3,3,3,3,3,3,3,3,3},
std::array<int,45>{0,0,0,0,9,9,9,9,9,8,8,8,8,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
std::array<int,45>{0,0,0,0,9,9,9,9,9,8,8,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
std::array<int,45>{9,9,9,9,9,9,9,9,8,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
std::array<int,45>{9,9,9,9,9,9,9,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
std::array<int,45>{9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}
};
// clang-format on

enum class biome_name {
  Unknown = 0,
  TropicalRainForest = 1,
  TropicalSeasonalForestSavanna = 2,
  SubtropicalDesert = 3,
  TemperateRainForest = 4,
  TemperateSeasonalForest = 5,
  WoodlandShrubland = 6,
  TemperateGrasslandDesert = 7,
  BorealForest = 8,
  Tundra = 9
};

constexpr int max_temperature_c{30};
constexpr int min_temperature_c{-15};

constexpr int max_precipitation_m{45};
constexpr int min_precipitation_m{0};

constexpr int AdjustTemperatureToPosition(int temp) {
  if (temp <= max_temperature_c || temp >= min_temperature_c) {
    // temperature is in bounds
    return temp + 15;
  }

  // temperature is out of bounds
  return -1;
}

constexpr int AdjustPrecipitationToPosition(int prec) {
  if (prec > max_precipitation_m || prec < min_precipitation_m) {
    // precipitation is out of bounds
    return -1;
  }

  // precipitation is in bounds
  return prec;
}

}  // namespace whittaker

}  // namespace FastBiome